# Securing a Linux Server

After coming across [this video by LiveOverflow](https://www.youtube.com/watch?v=fKuqYQdqRIs) it became clear that a server won't be secure just because you blindly follow some steps found somewhere on the internet like on this blog. It's much more important to actually understand the details behind why some of the steps mentioned below may or may not be important for security. One can have a false sense of security by just blindly following steps without actually knowing what exactly they do or how they help, because the security measures that one takes for a server largely depend on what that server is being used for.. 


  

### 1. Updates
First, make sure the packages on your server are updated and that they will update automatically. This example is based on Ubuntu based install which uses `apt` as its package manager, however it can be applied to any other. With the first command, we will be updating and upgrading in one command with the help of `&&` which execute the command following it if the first command has executed successfully. 

``` sh
sudo apt update && sudo apt upgrade
```

To automate this process we use the built in cron scheduler, simply open the crontab file and append the second line to the very bottom of the file. This will execute the update command every 12 hours of every day. 

``` sh
crontab -e 
0 */12 * * * apt update && apt upgrade -y
```

[Unattended upgrades](https://www.linuxcapable.com/how-to-setup-configure-unattended-upgrades-on-ubuntu-20-04/) are also an option.
  

### 2. UFW (Uncomplicated Firewall)
The second most important task is to secure your server with a simple firewall which will only allow connections through specific, user defined ports. **IMPORTANT:** if you are connected to your server via ssh follow the steps in **exactly** the right order, otherwise you will risk not being able to access your server. First, allow the port `22` since this is for `ssh` and then enable the firewall. If your application uses ports like 80 or 443 for serving websites you will have to allow those as well. The `ufw status` command returns a list of open ports and tells us if the firewall is active or not.

```sh
sudo ufw limit ssh
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw enable
sudo ufw reload
sudo ufw status
```

  

### 3. Create non-root user
``` sh
adduser name

su -
usermod -aG sudo name
exit
```

  

### 4. SSH Keypairs
If you don't already have an `id_rsa.pub` file located in `~/.ssh/` you must generate an ssh public key on your local computer, the on you use to access the server. When prompted to add a password, I would recommend to leave this empty. After running the first command below, a public key will be stored in the `.ssh/` directory. This key needs to be copied to the server and its contents will be appended to the `authorized_keys` file, located in `.ssh/` on the server.
``` sh
--- ON YOUR LOCAL COMPUTER ---
ssh-keygen -t rsa -b 4096
scp ~/.ssh/id_rsa.pub [user]@[serverIP]:~/.ssh/uploadedkey.pub
```

Next we append the contents of the newly copied `uploadedkey.pub` into the `authorized_keys` file. Finally we create a backup of the `sshd_config` file and find "PasswordAuthentication". If it is commented out, remove the comment and change the "yes" to a "no".

``` sh
--- ON YOUR VPS ---
cat ~/.ssh/uploadedkey.pub >> authorized_keys
sudo chmod 700 ~/.ssh/
sudo chmod 600 ~/.ssh/*

cd /etc/ssh/
cp sshd_config sshd_config.bak
sudo nano sshd_config
PasswordAuthentication no
PermitRootLogin no
sudo service ssh restart OR systemctl restart sshd
```

  

### 5. sysctl.conf

Open the `sysctl.conf` file and search for the following sections and uncomment the associated lines. 
* two lines to enable Spoof protection (reverse-path filter)
* Do not accept ICMP redirects (prevent MITM attacks)
* Do not send ICMP redirects (we are not a router)
* Do not accept ICMP source route packets (we are not a router)
* Log Martian Packets

``` sh
sudo nano /etc/sysctl.conf
sysctl -p
```

  

### 6. host.conf

Open the `host.conf` file and change the following
``` sh
sudo nano /etc/host.conf
order bind,hosts
nospoof on
```

  

### 7. fail2ban
``` sh
sudo apt install fail2ban
sudo systemctl enable fail2ban
sudo systemctl start fail2ban
sudo systemctl status fail2ban
```

  

### Optional Extras 

``` sh
uptime
netstat -tunlp
```

* Tripwire

  

### Cloudflare Proxy

Using cloudflare's reverse proxy greatly increases your security, because you no longer have to expose your own IP address to the internet. After signing up with their service (free account available) you can migrate your domain names to cloudflare and start using their proxies.